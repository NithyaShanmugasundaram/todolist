{"version":3,"sources":["Task.js","List.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Task","_this","this","react_default","a","createElement","className","style","textDecoration","props","todo","done","value","onClick","handleClick","i","Component","List","todos","map","src_Task","key","Form","onSubmit","handleSubmit","placeholder","onChange","handleChange","App","state","inputValue","event","console","log","target","setState","preventDefault","newTodo","month","push","day","src_Form","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,mLAjBN,IAAAC,EAAAC,KACP,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAACC,eAAgBN,KAAKO,MAAMC,KAAKC,KAAM,eAAe,SAClET,KAAKO,MAAMC,KAAKE,OAEjBT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAChBZ,EAAKQ,MAAMK,YAAYb,EAAKQ,MAAMM,KAClCb,KAAKO,MAAMC,KAAKC,KAAK,OAAO,oBATbK,aCwBJC,mLAtBJ,IAAAhB,EAAAC,KACT,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdJ,KAAKO,MAAMS,MAAMC,IAAI,SAACT,EAAKK,GAC3B,OAAQZ,EAAAC,EAAAC,cAACe,EAAD,CAAMC,IAAKN,EAClBA,EAAGA,EACHD,YAAab,EAAKQ,MAAMK,YACxBJ,KAAMA,cARQM,aCsBJM,mLAlBb,OACCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,QAAMkB,SAAUrB,KAAKO,MAAMe,cACzBrB,EAAAC,EAAAC,cAAA,SACIoB,YAAY,mBACRC,SAAUxB,KAAKO,MAAMkB,wBARfX,aCsDJY,oNAlDdC,MAAQ,CAEPC,WAAW,GACXZ,MAAM,MAEPS,aAAa,SAACI,GACVC,QAAQC,IAAIF,EAAMG,OAAOtB,OACzBX,EAAKkC,SAAS,CAACL,WAAWC,EAAMG,OAAOtB,WAGxCY,aAAa,SAACO,GAEbA,EAAMK,iBACN,IAAMC,EAAU,CACfzB,MAAMX,EAAK4B,MAAMC,WACjBnB,MAAK,GAEA2B,EAAQrC,EAAK4B,MAAMX,MACzBoB,EAAMC,KAAKF,GACXpC,EAAKkC,SAAU,CAACjB,MAAMoB,EAAMR,WAAW,QAIxChB,YAAc,SAACC,GACdiB,QAAQC,IAAI,IAAIlB,GAChB,IAAMyB,EAAIvC,EAAK4B,MAAMX,MACrBsB,EAAIzB,GAAGJ,MAAM6B,EAAIzB,GAAGJ,KACpBV,EAAKkC,SAAS,CAACjB,MAAMsB,6EAKtB,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAACoC,EAAD,CACDX,WAAY5B,KAAK2B,MAAMC,WACvBH,aAAczB,KAAKyB,aACnBH,aAActB,KAAKsB,eAGhBrB,EAAAC,EAAAC,cAACqC,EAAD,CACAxB,MAAOhB,KAAK2B,MAAMX,MAClBJ,YAAaZ,KAAKY,sBA3CNE,cCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1120c875.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Task extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"Task\">\n\t\t\t<span style={{textDecoration: this.props.todo.done ?'line-through':'none'}}>\n\t\t\t{this.props.todo.value}\n\t\t\t</span>\n\t\t\t<button onClick={()=>\n\t\t\t\tthis.props.handleClick(this.props.i)}>\n\t\t\t{this.props.todo.done?'undo':\"complete\"}\n\t\t\t</button>\n           </div>\n\n\t\t\t)\n\t}\n}\n\n\nexport default Task;","import React, { Component } from 'react';\nimport Task from './Task';\nclass List extends Component{\n   render(){\n\t\treturn(\n\t\t\t<div className='List'>\n\t\t\t{this.props.todos.map((todo,i)=>{\n\t\t\t\treturn( <Task key={i} \n\t\t\t\t\ti={i}\n\t\t\t\t\thandleClick={this.props.handleClick}\n\t\t\t\t\ttodo={todo}\n\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t\t}\n\t\t\t</div>\t\n\t\t\t\n\n\n\n\n\t\t\t);\n\t}\n}\nexport default List;","import React, { Component } from 'react';\nimport List from \"./List\";\n\nclass Form extends Component{\n\t\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"Form\">\n\t\t\t<form onSubmit={this.props.handleSubmit}>\n\t\t\t  <input \n\t\t\t      placeholder='Enter your input' \n\t\t\t          onChange={this.props.handleChange}\n\t\t\t         \n\t\t\t          \n\t\t\t            />\n\n\t\t\t</form>\n\t\t\t</div>\n\n\n\n\t\t\t)\n\t}\n}\nexport default Form;","import React, { Component } from 'react';\nimport Form from './Form';\nimport List from './List';\nimport Task from './Task';\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\t\n\t\tinputValue:'',\n\t\ttodos:[]\n\t}\n\thandleChange=(event)=>{\n    \tconsole.log(event.target.value);\n    \tthis.setState({inputValue:event.target.value});\n    }\n\n    handleSubmit=(event)=> {\n    \t\n    \tevent.preventDefault();\n    \tconst newTodo = {\n    \t\tvalue:this.state.inputValue,\n    \t\tdone:false\n    \t};\n    \tconst month = this.state.todos;\n    \tmonth.push(newTodo);\n    \tthis.setState ({todos:month,inputValue:''});\n    \t\n\n    }\n    handleClick = (i) => {\n    \tconsole.log('1',i);\n    \tconst day=this.state.todos;\n    \tday[i].done=!day[i].done;\n    \tthis.setState({todos:day})\n    }\n\n  \n    render() {\n    return (\n      <div className=\"App\">\n    <Form\n   inputValue={this.state.inputValue}\n   handleChange={this.handleChange}\n   handleSubmit={this.handleSubmit}\n   \n      />\n      <List\n      todos={this.state.todos}\n      handleClick={this.handleClick}\n      />\n    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}